"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/negotiator";
exports.ids = ["vendor-chunks/negotiator"];
exports.modules = {

/***/ "(rsc)/./node_modules/negotiator/index.js":
/*!******************************************!*\
  !*** ./node_modules/negotiator/index.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*!\n * negotiator\n * Copyright(c) 2012 Federico Romero\n * Copyright(c) 2012-2014 Isaac Z. Schlueter\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */ \nvar preferredCharsets = __webpack_require__(/*! ./lib/charset */ \"(rsc)/./node_modules/negotiator/lib/charset.js\");\nvar preferredEncodings = __webpack_require__(/*! ./lib/encoding */ \"(rsc)/./node_modules/negotiator/lib/encoding.js\");\nvar preferredLanguages = __webpack_require__(/*! ./lib/language */ \"(rsc)/./node_modules/negotiator/lib/language.js\");\nvar preferredMediaTypes = __webpack_require__(/*! ./lib/mediaType */ \"(rsc)/./node_modules/negotiator/lib/mediaType.js\");\n/**\n * Module exports.\n * @public\n */ module.exports = Negotiator;\nmodule.exports.Negotiator = Negotiator;\n/**\n * Create a Negotiator instance from a request.\n * @param {object} request\n * @public\n */ function Negotiator(request) {\n    if (!(this instanceof Negotiator)) {\n        return new Negotiator(request);\n    }\n    this.request = request;\n}\nNegotiator.prototype.charset = function charset(available) {\n    var set = this.charsets(available);\n    return set && set[0];\n};\nNegotiator.prototype.charsets = function charsets(available) {\n    return preferredCharsets(this.request.headers[\"accept-charset\"], available);\n};\nNegotiator.prototype.encoding = function encoding(available) {\n    var set = this.encodings(available);\n    return set && set[0];\n};\nNegotiator.prototype.encodings = function encodings(available) {\n    return preferredEncodings(this.request.headers[\"accept-encoding\"], available);\n};\nNegotiator.prototype.language = function language(available) {\n    var set = this.languages(available);\n    return set && set[0];\n};\nNegotiator.prototype.languages = function languages(available) {\n    return preferredLanguages(this.request.headers[\"accept-language\"], available);\n};\nNegotiator.prototype.mediaType = function mediaType(available) {\n    var set = this.mediaTypes(available);\n    return set && set[0];\n};\nNegotiator.prototype.mediaTypes = function mediaTypes(available) {\n    return preferredMediaTypes(this.request.headers.accept, available);\n};\n// Backwards compatibility\nNegotiator.prototype.preferredCharset = Negotiator.prototype.charset;\nNegotiator.prototype.preferredCharsets = Negotiator.prototype.charsets;\nNegotiator.prototype.preferredEncoding = Negotiator.prototype.encoding;\nNegotiator.prototype.preferredEncodings = Negotiator.prototype.encodings;\nNegotiator.prototype.preferredLanguage = Negotiator.prototype.language;\nNegotiator.prototype.preferredLanguages = Negotiator.prototype.languages;\nNegotiator.prototype.preferredMediaType = Negotiator.prototype.mediaType;\nNegotiator.prototype.preferredMediaTypes = Negotiator.prototype.mediaTypes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmVnb3RpYXRvci9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0NBTUMsR0FFRDtBQUVBLElBQUlBLG9CQUFvQkMsbUJBQU9BLENBQUM7QUFDaEMsSUFBSUMscUJBQXFCRCxtQkFBT0EsQ0FBQztBQUNqQyxJQUFJRSxxQkFBcUJGLG1CQUFPQSxDQUFDO0FBQ2pDLElBQUlHLHNCQUFzQkgsbUJBQU9BLENBQUM7QUFFbEM7OztDQUdDLEdBRURJLE9BQU9DLE9BQU8sR0FBR0M7QUFDakJGLHlCQUF5QixHQUFHRTtBQUU1Qjs7OztDQUlDLEdBRUQsU0FBU0EsV0FBV0MsT0FBTztJQUN6QixJQUFJLENBQUUsS0FBSSxZQUFZRCxVQUFTLEdBQUk7UUFDakMsT0FBTyxJQUFJQSxXQUFXQztJQUN4QjtJQUVBLElBQUksQ0FBQ0EsT0FBTyxHQUFHQTtBQUNqQjtBQUVBRCxXQUFXRSxTQUFTLENBQUNDLE9BQU8sR0FBRyxTQUFTQSxRQUFRQyxTQUFTO0lBQ3ZELElBQUlDLE1BQU0sSUFBSSxDQUFDQyxRQUFRLENBQUNGO0lBQ3hCLE9BQU9DLE9BQU9BLEdBQUcsQ0FBQyxFQUFFO0FBQ3RCO0FBRUFMLFdBQVdFLFNBQVMsQ0FBQ0ksUUFBUSxHQUFHLFNBQVNBLFNBQVNGLFNBQVM7SUFDekQsT0FBT1gsa0JBQWtCLElBQUksQ0FBQ1EsT0FBTyxDQUFDTSxPQUFPLENBQUMsaUJBQWlCLEVBQUVIO0FBQ25FO0FBRUFKLFdBQVdFLFNBQVMsQ0FBQ00sUUFBUSxHQUFHLFNBQVNBLFNBQVNKLFNBQVM7SUFDekQsSUFBSUMsTUFBTSxJQUFJLENBQUNJLFNBQVMsQ0FBQ0w7SUFDekIsT0FBT0MsT0FBT0EsR0FBRyxDQUFDLEVBQUU7QUFDdEI7QUFFQUwsV0FBV0UsU0FBUyxDQUFDTyxTQUFTLEdBQUcsU0FBU0EsVUFBVUwsU0FBUztJQUMzRCxPQUFPVCxtQkFBbUIsSUFBSSxDQUFDTSxPQUFPLENBQUNNLE9BQU8sQ0FBQyxrQkFBa0IsRUFBRUg7QUFDckU7QUFFQUosV0FBV0UsU0FBUyxDQUFDUSxRQUFRLEdBQUcsU0FBU0EsU0FBU04sU0FBUztJQUN6RCxJQUFJQyxNQUFNLElBQUksQ0FBQ00sU0FBUyxDQUFDUDtJQUN6QixPQUFPQyxPQUFPQSxHQUFHLENBQUMsRUFBRTtBQUN0QjtBQUVBTCxXQUFXRSxTQUFTLENBQUNTLFNBQVMsR0FBRyxTQUFTQSxVQUFVUCxTQUFTO0lBQzNELE9BQU9SLG1CQUFtQixJQUFJLENBQUNLLE9BQU8sQ0FBQ00sT0FBTyxDQUFDLGtCQUFrQixFQUFFSDtBQUNyRTtBQUVBSixXQUFXRSxTQUFTLENBQUNVLFNBQVMsR0FBRyxTQUFTQSxVQUFVUixTQUFTO0lBQzNELElBQUlDLE1BQU0sSUFBSSxDQUFDUSxVQUFVLENBQUNUO0lBQzFCLE9BQU9DLE9BQU9BLEdBQUcsQ0FBQyxFQUFFO0FBQ3RCO0FBRUFMLFdBQVdFLFNBQVMsQ0FBQ1csVUFBVSxHQUFHLFNBQVNBLFdBQVdULFNBQVM7SUFDN0QsT0FBT1Asb0JBQW9CLElBQUksQ0FBQ0ksT0FBTyxDQUFDTSxPQUFPLENBQUNPLE1BQU0sRUFBRVY7QUFDMUQ7QUFFQSwwQkFBMEI7QUFDMUJKLFdBQVdFLFNBQVMsQ0FBQ2EsZ0JBQWdCLEdBQUdmLFdBQVdFLFNBQVMsQ0FBQ0MsT0FBTztBQUNwRUgsV0FBV0UsU0FBUyxDQUFDVCxpQkFBaUIsR0FBR08sV0FBV0UsU0FBUyxDQUFDSSxRQUFRO0FBQ3RFTixXQUFXRSxTQUFTLENBQUNjLGlCQUFpQixHQUFHaEIsV0FBV0UsU0FBUyxDQUFDTSxRQUFRO0FBQ3RFUixXQUFXRSxTQUFTLENBQUNQLGtCQUFrQixHQUFHSyxXQUFXRSxTQUFTLENBQUNPLFNBQVM7QUFDeEVULFdBQVdFLFNBQVMsQ0FBQ2UsaUJBQWlCLEdBQUdqQixXQUFXRSxTQUFTLENBQUNRLFFBQVE7QUFDdEVWLFdBQVdFLFNBQVMsQ0FBQ04sa0JBQWtCLEdBQUdJLFdBQVdFLFNBQVMsQ0FBQ1MsU0FBUztBQUN4RVgsV0FBV0UsU0FBUyxDQUFDZ0Isa0JBQWtCLEdBQUdsQixXQUFXRSxTQUFTLENBQUNVLFNBQVM7QUFDeEVaLFdBQVdFLFNBQVMsQ0FBQ0wsbUJBQW1CLEdBQUdHLFdBQVdFLFNBQVMsQ0FBQ1csVUFBVSIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYm9vay1hcHAvLi9ub2RlX21vZHVsZXMvbmVnb3RpYXRvci9pbmRleC5qcz84MTY1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogbmVnb3RpYXRvclxuICogQ29weXJpZ2h0KGMpIDIwMTIgRmVkZXJpY28gUm9tZXJvXG4gKiBDb3B5cmlnaHQoYykgMjAxMi0yMDE0IElzYWFjIFouIFNjaGx1ZXRlclxuICogQ29weXJpZ2h0KGMpIDIwMTUgRG91Z2xhcyBDaHJpc3RvcGhlciBXaWxzb25cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHByZWZlcnJlZENoYXJzZXRzID0gcmVxdWlyZSgnLi9saWIvY2hhcnNldCcpXG52YXIgcHJlZmVycmVkRW5jb2RpbmdzID0gcmVxdWlyZSgnLi9saWIvZW5jb2RpbmcnKVxudmFyIHByZWZlcnJlZExhbmd1YWdlcyA9IHJlcXVpcmUoJy4vbGliL2xhbmd1YWdlJylcbnZhciBwcmVmZXJyZWRNZWRpYVR5cGVzID0gcmVxdWlyZSgnLi9saWIvbWVkaWFUeXBlJylcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqIEBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5lZ290aWF0b3I7XG5tb2R1bGUuZXhwb3J0cy5OZWdvdGlhdG9yID0gTmVnb3RpYXRvcjtcblxuLyoqXG4gKiBDcmVhdGUgYSBOZWdvdGlhdG9yIGluc3RhbmNlIGZyb20gYSByZXF1ZXN0LlxuICogQHBhcmFtIHtvYmplY3R9IHJlcXVlc3RcbiAqIEBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBOZWdvdGlhdG9yKHJlcXVlc3QpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIE5lZ290aWF0b3IpKSB7XG4gICAgcmV0dXJuIG5ldyBOZWdvdGlhdG9yKHJlcXVlc3QpO1xuICB9XG5cbiAgdGhpcy5yZXF1ZXN0ID0gcmVxdWVzdDtcbn1cblxuTmVnb3RpYXRvci5wcm90b3R5cGUuY2hhcnNldCA9IGZ1bmN0aW9uIGNoYXJzZXQoYXZhaWxhYmxlKSB7XG4gIHZhciBzZXQgPSB0aGlzLmNoYXJzZXRzKGF2YWlsYWJsZSk7XG4gIHJldHVybiBzZXQgJiYgc2V0WzBdO1xufTtcblxuTmVnb3RpYXRvci5wcm90b3R5cGUuY2hhcnNldHMgPSBmdW5jdGlvbiBjaGFyc2V0cyhhdmFpbGFibGUpIHtcbiAgcmV0dXJuIHByZWZlcnJlZENoYXJzZXRzKHRoaXMucmVxdWVzdC5oZWFkZXJzWydhY2NlcHQtY2hhcnNldCddLCBhdmFpbGFibGUpO1xufTtcblxuTmVnb3RpYXRvci5wcm90b3R5cGUuZW5jb2RpbmcgPSBmdW5jdGlvbiBlbmNvZGluZyhhdmFpbGFibGUpIHtcbiAgdmFyIHNldCA9IHRoaXMuZW5jb2RpbmdzKGF2YWlsYWJsZSk7XG4gIHJldHVybiBzZXQgJiYgc2V0WzBdO1xufTtcblxuTmVnb3RpYXRvci5wcm90b3R5cGUuZW5jb2RpbmdzID0gZnVuY3Rpb24gZW5jb2RpbmdzKGF2YWlsYWJsZSkge1xuICByZXR1cm4gcHJlZmVycmVkRW5jb2RpbmdzKHRoaXMucmVxdWVzdC5oZWFkZXJzWydhY2NlcHQtZW5jb2RpbmcnXSwgYXZhaWxhYmxlKTtcbn07XG5cbk5lZ290aWF0b3IucHJvdG90eXBlLmxhbmd1YWdlID0gZnVuY3Rpb24gbGFuZ3VhZ2UoYXZhaWxhYmxlKSB7XG4gIHZhciBzZXQgPSB0aGlzLmxhbmd1YWdlcyhhdmFpbGFibGUpO1xuICByZXR1cm4gc2V0ICYmIHNldFswXTtcbn07XG5cbk5lZ290aWF0b3IucHJvdG90eXBlLmxhbmd1YWdlcyA9IGZ1bmN0aW9uIGxhbmd1YWdlcyhhdmFpbGFibGUpIHtcbiAgcmV0dXJuIHByZWZlcnJlZExhbmd1YWdlcyh0aGlzLnJlcXVlc3QuaGVhZGVyc1snYWNjZXB0LWxhbmd1YWdlJ10sIGF2YWlsYWJsZSk7XG59O1xuXG5OZWdvdGlhdG9yLnByb3RvdHlwZS5tZWRpYVR5cGUgPSBmdW5jdGlvbiBtZWRpYVR5cGUoYXZhaWxhYmxlKSB7XG4gIHZhciBzZXQgPSB0aGlzLm1lZGlhVHlwZXMoYXZhaWxhYmxlKTtcbiAgcmV0dXJuIHNldCAmJiBzZXRbMF07XG59O1xuXG5OZWdvdGlhdG9yLnByb3RvdHlwZS5tZWRpYVR5cGVzID0gZnVuY3Rpb24gbWVkaWFUeXBlcyhhdmFpbGFibGUpIHtcbiAgcmV0dXJuIHByZWZlcnJlZE1lZGlhVHlwZXModGhpcy5yZXF1ZXN0LmhlYWRlcnMuYWNjZXB0LCBhdmFpbGFibGUpO1xufTtcblxuLy8gQmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbk5lZ290aWF0b3IucHJvdG90eXBlLnByZWZlcnJlZENoYXJzZXQgPSBOZWdvdGlhdG9yLnByb3RvdHlwZS5jaGFyc2V0O1xuTmVnb3RpYXRvci5wcm90b3R5cGUucHJlZmVycmVkQ2hhcnNldHMgPSBOZWdvdGlhdG9yLnByb3RvdHlwZS5jaGFyc2V0cztcbk5lZ290aWF0b3IucHJvdG90eXBlLnByZWZlcnJlZEVuY29kaW5nID0gTmVnb3RpYXRvci5wcm90b3R5cGUuZW5jb2Rpbmc7XG5OZWdvdGlhdG9yLnByb3RvdHlwZS5wcmVmZXJyZWRFbmNvZGluZ3MgPSBOZWdvdGlhdG9yLnByb3RvdHlwZS5lbmNvZGluZ3M7XG5OZWdvdGlhdG9yLnByb3RvdHlwZS5wcmVmZXJyZWRMYW5ndWFnZSA9IE5lZ290aWF0b3IucHJvdG90eXBlLmxhbmd1YWdlO1xuTmVnb3RpYXRvci5wcm90b3R5cGUucHJlZmVycmVkTGFuZ3VhZ2VzID0gTmVnb3RpYXRvci5wcm90b3R5cGUubGFuZ3VhZ2VzO1xuTmVnb3RpYXRvci5wcm90b3R5cGUucHJlZmVycmVkTWVkaWFUeXBlID0gTmVnb3RpYXRvci5wcm90b3R5cGUubWVkaWFUeXBlO1xuTmVnb3RpYXRvci5wcm90b3R5cGUucHJlZmVycmVkTWVkaWFUeXBlcyA9IE5lZ290aWF0b3IucHJvdG90eXBlLm1lZGlhVHlwZXM7XG4iXSwibmFtZXMiOlsicHJlZmVycmVkQ2hhcnNldHMiLCJyZXF1aXJlIiwicHJlZmVycmVkRW5jb2RpbmdzIiwicHJlZmVycmVkTGFuZ3VhZ2VzIiwicHJlZmVycmVkTWVkaWFUeXBlcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJOZWdvdGlhdG9yIiwicmVxdWVzdCIsInByb3RvdHlwZSIsImNoYXJzZXQiLCJhdmFpbGFibGUiLCJzZXQiLCJjaGFyc2V0cyIsImhlYWRlcnMiLCJlbmNvZGluZyIsImVuY29kaW5ncyIsImxhbmd1YWdlIiwibGFuZ3VhZ2VzIiwibWVkaWFUeXBlIiwibWVkaWFUeXBlcyIsImFjY2VwdCIsInByZWZlcnJlZENoYXJzZXQiLCJwcmVmZXJyZWRFbmNvZGluZyIsInByZWZlcnJlZExhbmd1YWdlIiwicHJlZmVycmVkTWVkaWFUeXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/negotiator/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/negotiator/lib/charset.js":
/*!************************************************!*\
  !*** ./node_modules/negotiator/lib/charset.js ***!
  \************************************************/
/***/ ((module) => {

eval("/**\n * negotiator\n * Copyright(c) 2012 Isaac Z. Schlueter\n * Copyright(c) 2014 Federico Romero\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */ \n/**\n * Module exports.\n * @public\n */ module.exports = preferredCharsets;\nmodule.exports.preferredCharsets = preferredCharsets;\n/**\n * Module variables.\n * @private\n */ var simpleCharsetRegExp = /^\\s*([^\\s;]+)\\s*(?:;(.*))?$/;\n/**\n * Parse the Accept-Charset header.\n * @private\n */ function parseAcceptCharset(accept) {\n    var accepts = accept.split(\",\");\n    for(var i = 0, j = 0; i < accepts.length; i++){\n        var charset = parseCharset(accepts[i].trim(), i);\n        if (charset) {\n            accepts[j++] = charset;\n        }\n    }\n    // trim accepts\n    accepts.length = j;\n    return accepts;\n}\n/**\n * Parse a charset from the Accept-Charset header.\n * @private\n */ function parseCharset(str, i) {\n    var match = simpleCharsetRegExp.exec(str);\n    if (!match) return null;\n    var charset = match[1];\n    var q = 1;\n    if (match[2]) {\n        var params = match[2].split(\";\");\n        for(var j = 0; j < params.length; j++){\n            var p = params[j].trim().split(\"=\");\n            if (p[0] === \"q\") {\n                q = parseFloat(p[1]);\n                break;\n            }\n        }\n    }\n    return {\n        charset: charset,\n        q: q,\n        i: i\n    };\n}\n/**\n * Get the priority of a charset.\n * @private\n */ function getCharsetPriority(charset, accepted, index) {\n    var priority = {\n        o: -1,\n        q: 0,\n        s: 0\n    };\n    for(var i = 0; i < accepted.length; i++){\n        var spec = specify(charset, accepted[i], index);\n        if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {\n            priority = spec;\n        }\n    }\n    return priority;\n}\n/**\n * Get the specificity of the charset.\n * @private\n */ function specify(charset, spec, index) {\n    var s = 0;\n    if (spec.charset.toLowerCase() === charset.toLowerCase()) {\n        s |= 1;\n    } else if (spec.charset !== \"*\") {\n        return null;\n    }\n    return {\n        i: index,\n        o: spec.i,\n        q: spec.q,\n        s: s\n    };\n}\n/**\n * Get the preferred charsets from an Accept-Charset header.\n * @public\n */ function preferredCharsets(accept, provided) {\n    // RFC 2616 sec 14.2: no header = *\n    var accepts = parseAcceptCharset(accept === undefined ? \"*\" : accept || \"\");\n    if (!provided) {\n        // sorted list of all charsets\n        return accepts.filter(isQuality).sort(compareSpecs).map(getFullCharset);\n    }\n    var priorities = provided.map(function getPriority(type, index) {\n        return getCharsetPriority(type, accepts, index);\n    });\n    // sorted list of accepted charsets\n    return priorities.filter(isQuality).sort(compareSpecs).map(function getCharset(priority) {\n        return provided[priorities.indexOf(priority)];\n    });\n}\n/**\n * Compare two specs.\n * @private\n */ function compareSpecs(a, b) {\n    return b.q - a.q || b.s - a.s || a.o - b.o || a.i - b.i || 0;\n}\n/**\n * Get full charset string.\n * @private\n */ function getFullCharset(spec) {\n    return spec.charset;\n}\n/**\n * Check if a spec has any quality.\n * @private\n */ function isQuality(spec) {\n    return spec.q > 0;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/negotiator/lib/charset.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/negotiator/lib/encoding.js":
/*!*************************************************!*\
  !*** ./node_modules/negotiator/lib/encoding.js ***!
  \*************************************************/
/***/ ((module) => {

eval("/**\n * negotiator\n * Copyright(c) 2012 Isaac Z. Schlueter\n * Copyright(c) 2014 Federico Romero\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */ \n/**\n * Module exports.\n * @public\n */ module.exports = preferredEncodings;\nmodule.exports.preferredEncodings = preferredEncodings;\n/**\n * Module variables.\n * @private\n */ var simpleEncodingRegExp = /^\\s*([^\\s;]+)\\s*(?:;(.*))?$/;\n/**\n * Parse the Accept-Encoding header.\n * @private\n */ function parseAcceptEncoding(accept) {\n    var accepts = accept.split(\",\");\n    var hasIdentity = false;\n    var minQuality = 1;\n    for(var i = 0, j = 0; i < accepts.length; i++){\n        var encoding = parseEncoding(accepts[i].trim(), i);\n        if (encoding) {\n            accepts[j++] = encoding;\n            hasIdentity = hasIdentity || specify(\"identity\", encoding);\n            minQuality = Math.min(minQuality, encoding.q || 1);\n        }\n    }\n    if (!hasIdentity) {\n        /*\n     * If identity doesn't explicitly appear in the accept-encoding header,\n     * it's added to the list of acceptable encoding with the lowest q\n     */ accepts[j++] = {\n            encoding: \"identity\",\n            q: minQuality,\n            i: i\n        };\n    }\n    // trim accepts\n    accepts.length = j;\n    return accepts;\n}\n/**\n * Parse an encoding from the Accept-Encoding header.\n * @private\n */ function parseEncoding(str, i) {\n    var match = simpleEncodingRegExp.exec(str);\n    if (!match) return null;\n    var encoding = match[1];\n    var q = 1;\n    if (match[2]) {\n        var params = match[2].split(\";\");\n        for(var j = 0; j < params.length; j++){\n            var p = params[j].trim().split(\"=\");\n            if (p[0] === \"q\") {\n                q = parseFloat(p[1]);\n                break;\n            }\n        }\n    }\n    return {\n        encoding: encoding,\n        q: q,\n        i: i\n    };\n}\n/**\n * Get the priority of an encoding.\n * @private\n */ function getEncodingPriority(encoding, accepted, index) {\n    var priority = {\n        o: -1,\n        q: 0,\n        s: 0\n    };\n    for(var i = 0; i < accepted.length; i++){\n        var spec = specify(encoding, accepted[i], index);\n        if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {\n            priority = spec;\n        }\n    }\n    return priority;\n}\n/**\n * Get the specificity of the encoding.\n * @private\n */ function specify(encoding, spec, index) {\n    var s = 0;\n    if (spec.encoding.toLowerCase() === encoding.toLowerCase()) {\n        s |= 1;\n    } else if (spec.encoding !== \"*\") {\n        return null;\n    }\n    return {\n        i: index,\n        o: spec.i,\n        q: spec.q,\n        s: s\n    };\n}\n/**\n * Get the preferred encodings from an Accept-Encoding header.\n * @public\n */ function preferredEncodings(accept, provided) {\n    var accepts = parseAcceptEncoding(accept || \"\");\n    if (!provided) {\n        // sorted list of all encodings\n        return accepts.filter(isQuality).sort(compareSpecs).map(getFullEncoding);\n    }\n    var priorities = provided.map(function getPriority(type, index) {\n        return getEncodingPriority(type, accepts, index);\n    });\n    // sorted list of accepted encodings\n    return priorities.filter(isQuality).sort(compareSpecs).map(function getEncoding(priority) {\n        return provided[priorities.indexOf(priority)];\n    });\n}\n/**\n * Compare two specs.\n * @private\n */ function compareSpecs(a, b) {\n    return b.q - a.q || b.s - a.s || a.o - b.o || a.i - b.i || 0;\n}\n/**\n * Get full encoding string.\n * @private\n */ function getFullEncoding(spec) {\n    return spec.encoding;\n}\n/**\n * Check if a spec has any quality.\n * @private\n */ function isQuality(spec) {\n    return spec.q > 0;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/negotiator/lib/encoding.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/negotiator/lib/language.js":
/*!*************************************************!*\
  !*** ./node_modules/negotiator/lib/language.js ***!
  \*************************************************/
/***/ ((module) => {

eval("/**\n * negotiator\n * Copyright(c) 2012 Isaac Z. Schlueter\n * Copyright(c) 2014 Federico Romero\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */ \n/**\n * Module exports.\n * @public\n */ module.exports = preferredLanguages;\nmodule.exports.preferredLanguages = preferredLanguages;\n/**\n * Module variables.\n * @private\n */ var simpleLanguageRegExp = /^\\s*([^\\s\\-;]+)(?:-([^\\s;]+))?\\s*(?:;(.*))?$/;\n/**\n * Parse the Accept-Language header.\n * @private\n */ function parseAcceptLanguage(accept) {\n    var accepts = accept.split(\",\");\n    for(var i = 0, j = 0; i < accepts.length; i++){\n        var language = parseLanguage(accepts[i].trim(), i);\n        if (language) {\n            accepts[j++] = language;\n        }\n    }\n    // trim accepts\n    accepts.length = j;\n    return accepts;\n}\n/**\n * Parse a language from the Accept-Language header.\n * @private\n */ function parseLanguage(str, i) {\n    var match = simpleLanguageRegExp.exec(str);\n    if (!match) return null;\n    var prefix = match[1];\n    var suffix = match[2];\n    var full = prefix;\n    if (suffix) full += \"-\" + suffix;\n    var q = 1;\n    if (match[3]) {\n        var params = match[3].split(\";\");\n        for(var j = 0; j < params.length; j++){\n            var p = params[j].split(\"=\");\n            if (p[0] === \"q\") q = parseFloat(p[1]);\n        }\n    }\n    return {\n        prefix: prefix,\n        suffix: suffix,\n        q: q,\n        i: i,\n        full: full\n    };\n}\n/**\n * Get the priority of a language.\n * @private\n */ function getLanguagePriority(language, accepted, index) {\n    var priority = {\n        o: -1,\n        q: 0,\n        s: 0\n    };\n    for(var i = 0; i < accepted.length; i++){\n        var spec = specify(language, accepted[i], index);\n        if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {\n            priority = spec;\n        }\n    }\n    return priority;\n}\n/**\n * Get the specificity of the language.\n * @private\n */ function specify(language, spec, index) {\n    var p = parseLanguage(language);\n    if (!p) return null;\n    var s = 0;\n    if (spec.full.toLowerCase() === p.full.toLowerCase()) {\n        s |= 4;\n    } else if (spec.prefix.toLowerCase() === p.full.toLowerCase()) {\n        s |= 2;\n    } else if (spec.full.toLowerCase() === p.prefix.toLowerCase()) {\n        s |= 1;\n    } else if (spec.full !== \"*\") {\n        return null;\n    }\n    return {\n        i: index,\n        o: spec.i,\n        q: spec.q,\n        s: s\n    };\n}\n/**\n * Get the preferred languages from an Accept-Language header.\n * @public\n */ function preferredLanguages(accept, provided) {\n    // RFC 2616 sec 14.4: no header = *\n    var accepts = parseAcceptLanguage(accept === undefined ? \"*\" : accept || \"\");\n    if (!provided) {\n        // sorted list of all languages\n        return accepts.filter(isQuality).sort(compareSpecs).map(getFullLanguage);\n    }\n    var priorities = provided.map(function getPriority(type, index) {\n        return getLanguagePriority(type, accepts, index);\n    });\n    // sorted list of accepted languages\n    return priorities.filter(isQuality).sort(compareSpecs).map(function getLanguage(priority) {\n        return provided[priorities.indexOf(priority)];\n    });\n}\n/**\n * Compare two specs.\n * @private\n */ function compareSpecs(a, b) {\n    return b.q - a.q || b.s - a.s || a.o - b.o || a.i - b.i || 0;\n}\n/**\n * Get full language string.\n * @private\n */ function getFullLanguage(spec) {\n    return spec.full;\n}\n/**\n * Check if a spec has any quality.\n * @private\n */ function isQuality(spec) {\n    return spec.q > 0;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmVnb3RpYXRvci9saWIvbGFuZ3VhZ2UuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztDQU1DLEdBRUQ7QUFFQTs7O0NBR0MsR0FFREEsT0FBT0MsT0FBTyxHQUFHQztBQUNqQkYsaUNBQWlDLEdBQUdFO0FBRXBDOzs7Q0FHQyxHQUVELElBQUlDLHVCQUF1QjtBQUUzQjs7O0NBR0MsR0FFRCxTQUFTQyxvQkFBb0JDLE1BQU07SUFDakMsSUFBSUMsVUFBVUQsT0FBT0UsS0FBSyxDQUFDO0lBRTNCLElBQUssSUFBSUMsSUFBSSxHQUFHQyxJQUFJLEdBQUdELElBQUlGLFFBQVFJLE1BQU0sRUFBRUYsSUFBSztRQUM5QyxJQUFJRyxXQUFXQyxjQUFjTixPQUFPLENBQUNFLEVBQUUsQ0FBQ0ssSUFBSSxJQUFJTDtRQUVoRCxJQUFJRyxVQUFVO1lBQ1pMLE9BQU8sQ0FBQ0csSUFBSSxHQUFHRTtRQUNqQjtJQUNGO0lBRUEsZUFBZTtJQUNmTCxRQUFRSSxNQUFNLEdBQUdEO0lBRWpCLE9BQU9IO0FBQ1Q7QUFFQTs7O0NBR0MsR0FFRCxTQUFTTSxjQUFjRSxHQUFHLEVBQUVOLENBQUM7SUFDM0IsSUFBSU8sUUFBUVoscUJBQXFCYSxJQUFJLENBQUNGO0lBQ3RDLElBQUksQ0FBQ0MsT0FBTyxPQUFPO0lBRW5CLElBQUlFLFNBQVNGLEtBQUssQ0FBQyxFQUFFO0lBQ3JCLElBQUlHLFNBQVNILEtBQUssQ0FBQyxFQUFFO0lBQ3JCLElBQUlJLE9BQU9GO0lBRVgsSUFBSUMsUUFBUUMsUUFBUSxNQUFNRDtJQUUxQixJQUFJRSxJQUFJO0lBQ1IsSUFBSUwsS0FBSyxDQUFDLEVBQUUsRUFBRTtRQUNaLElBQUlNLFNBQVNOLEtBQUssQ0FBQyxFQUFFLENBQUNSLEtBQUssQ0FBQztRQUM1QixJQUFLLElBQUlFLElBQUksR0FBR0EsSUFBSVksT0FBT1gsTUFBTSxFQUFFRCxJQUFLO1lBQ3RDLElBQUlhLElBQUlELE1BQU0sQ0FBQ1osRUFBRSxDQUFD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O0lBQzNCLE9BQU9BLEtBQUtYLElBQUk7QUFDbEI7QUFFQTs7O0NBR0MsR0FFRCxTQUFTaUIsVUFBVU4sSUFBSTtJQUNyQixPQUFPQSxLQUFLVixDQUFDLEdBQUc7QUFDbEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJvb2stYXBwLy4vbm9kZV9tb2R1bGVzL25lZ290aWF0b3IvbGliL2xhbmd1YWdlLmpzP2M4M2UiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBuZWdvdGlhdG9yXG4gKiBDb3B5cmlnaHQoYykgMjAxMiBJc2FhYyBaLiBTY2hsdWV0ZXJcbiAqIENvcHlyaWdodChjKSAyMDE0IEZlZGVyaWNvIFJvbWVyb1xuICogQ29weXJpZ2h0KGMpIDIwMTQtMjAxNSBEb3VnbGFzIENocmlzdG9waGVyIFdpbHNvblxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICogQHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gcHJlZmVycmVkTGFuZ3VhZ2VzO1xubW9kdWxlLmV4cG9ydHMucHJlZmVycmVkTGFuZ3VhZ2VzID0gcHJlZmVycmVkTGFuZ3VhZ2VzO1xuXG4vKipcbiAqIE1vZHVsZSB2YXJpYWJsZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBzaW1wbGVMYW5ndWFnZVJlZ0V4cCA9IC9eXFxzKihbXlxcc1xcLTtdKykoPzotKFteXFxzO10rKSk/XFxzKig/OjsoLiopKT8kLztcblxuLyoqXG4gKiBQYXJzZSB0aGUgQWNjZXB0LUxhbmd1YWdlIGhlYWRlci5cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2VBY2NlcHRMYW5ndWFnZShhY2NlcHQpIHtcbiAgdmFyIGFjY2VwdHMgPSBhY2NlcHQuc3BsaXQoJywnKTtcblxuICBmb3IgKHZhciBpID0gMCwgaiA9IDA7IGkgPCBhY2NlcHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGxhbmd1YWdlID0gcGFyc2VMYW5ndWFnZShhY2NlcHRzW2ldLnRyaW0oKSwgaSk7XG5cbiAgICBpZiAobGFuZ3VhZ2UpIHtcbiAgICAgIGFjY2VwdHNbaisrXSA9IGxhbmd1YWdlO1xuICAgIH1cbiAgfVxuXG4gIC8vIHRyaW0gYWNjZXB0c1xuICBhY2NlcHRzLmxlbmd0aCA9IGo7XG5cbiAgcmV0dXJuIGFjY2VwdHM7XG59XG5cbi8qKlxuICogUGFyc2UgYSBsYW5ndWFnZSBmcm9tIHRoZSBBY2NlcHQtTGFuZ3VhZ2UgaGVhZGVyLlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZUxhbmd1YWdlKHN0ciwgaSkge1xuICB2YXIgbWF0Y2ggPSBzaW1wbGVMYW5ndWFnZVJlZ0V4cC5leGVjKHN0cik7XG4gIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuXG4gIHZhciBwcmVmaXggPSBtYXRjaFsxXVxuICB2YXIgc3VmZml4ID0gbWF0Y2hbMl1cbiAgdmFyIGZ1bGwgPSBwcmVmaXhcblxuICBpZiAoc3VmZml4KSBmdWxsICs9IFwiLVwiICsgc3VmZml4O1xuXG4gIHZhciBxID0gMTtcbiAgaWYgKG1hdGNoWzNdKSB7XG4gICAgdmFyIHBhcmFtcyA9IG1hdGNoWzNdLnNwbGl0KCc7JylcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHBhcmFtcy5sZW5ndGg7IGorKykge1xuICAgICAgdmFyIHAgPSBwYXJhbXNbal0uc3BsaXQoJz0nKTtcbiAgICAgIGlmIChwWzBdID09PSAncScpIHEgPSBwYXJzZUZsb2F0KHBbMV0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcHJlZml4OiBwcmVmaXgsXG4gICAgc3VmZml4OiBzdWZmaXgsXG4gICAgcTogcSxcbiAgICBpOiBpLFxuICAgIGZ1bGw6IGZ1bGxcbiAgfTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHByaW9yaXR5IG9mIGEgbGFuZ3VhZ2UuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGdldExhbmd1YWdlUHJpb3JpdHkobGFuZ3VhZ2UsIGFjY2VwdGVkLCBpbmRleCkge1xuICB2YXIgcHJpb3JpdHkgPSB7bzogLTEsIHE6IDAsIHM6IDB9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYWNjZXB0ZWQubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc3BlYyA9IHNwZWNpZnkobGFuZ3VhZ2UsIGFjY2VwdGVkW2ldLCBpbmRleCk7XG5cbiAgICBpZiAoc3BlYyAmJiAocHJpb3JpdHkucyAtIHNwZWMucyB8fCBwcmlvcml0eS5xIC0gc3BlYy5xIHx8IHByaW9yaXR5Lm8gLSBzcGVjLm8pIDwgMCkge1xuICAgICAgcHJpb3JpdHkgPSBzcGVjO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwcmlvcml0eTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHNwZWNpZmljaXR5IG9mIHRoZSBsYW5ndWFnZS5cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc3BlY2lmeShsYW5ndWFnZSwgc3BlYywgaW5kZXgpIHtcbiAgdmFyIHAgPSBwYXJzZUxhbmd1YWdlKGxhbmd1YWdlKVxuICBpZiAoIXApIHJldHVybiBudWxsO1xuICB2YXIgcyA9IDA7XG4gIGlmKHNwZWMuZnVsbC50b0xvd2VyQ2FzZSgpID09PSBwLmZ1bGwudG9Mb3dlckNhc2UoKSl7XG4gICAgcyB8PSA0O1xuICB9IGVsc2UgaWYgKHNwZWMucHJlZml4LnRvTG93ZXJDYXNlKCkgPT09IHAuZnVsbC50b0xvd2VyQ2FzZSgpKSB7XG4gICAgcyB8PSAyO1xuICB9IGVsc2UgaWYgKHNwZWMuZnVsbC50b0xvd2VyQ2FzZSgpID09PSBwLnByZWZpeC50b0xvd2VyQ2FzZSgpKSB7XG4gICAgcyB8PSAxO1xuICB9IGVsc2UgaWYgKHNwZWMuZnVsbCAhPT0gJyonICkge1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICByZXR1cm4ge1xuICAgIGk6IGluZGV4LFxuICAgIG86IHNwZWMuaSxcbiAgICBxOiBzcGVjLnEsXG4gICAgczogc1xuICB9XG59O1xuXG4vKipcbiAqIEdldCB0aGUgcHJlZmVycmVkIGxhbmd1YWdlcyBmcm9tIGFuIEFjY2VwdC1MYW5ndWFnZSBoZWFkZXIuXG4gKiBAcHVibGljXG4gKi9cblxuZnVuY3Rpb24gcHJlZmVycmVkTGFuZ3VhZ2VzKGFjY2VwdCwgcHJvdmlkZWQpIHtcbiAgLy8gUkZDIDI2MTYgc2VjIDE0LjQ6IG5vIGhlYWRlciA9ICpcbiAgdmFyIGFjY2VwdHMgPSBwYXJzZUFjY2VwdExhbmd1YWdlKGFjY2VwdCA9PT0gdW5kZWZpbmVkID8gJyonIDogYWNjZXB0IHx8ICcnKTtcblxuICBpZiAoIXByb3ZpZGVkKSB7XG4gICAgLy8gc29ydGVkIGxpc3Qgb2YgYWxsIGxhbmd1YWdlc1xuICAgIHJldHVybiBhY2NlcHRzXG4gICAgICAuZmlsdGVyKGlzUXVhbGl0eSlcbiAgICAgIC5zb3J0KGNvbXBhcmVTcGVjcylcbiAgICAgIC5tYXAoZ2V0RnVsbExhbmd1YWdlKTtcbiAgfVxuXG4gIHZhciBwcmlvcml0aWVzID0gcHJvdmlkZWQubWFwKGZ1bmN0aW9uIGdldFByaW9yaXR5KHR5cGUsIGluZGV4KSB7XG4gICAgcmV0dXJuIGdldExhbmd1YWdlUHJpb3JpdHkodHlwZSwgYWNjZXB0cywgaW5kZXgpO1xuICB9KTtcblxuICAvLyBzb3J0ZWQgbGlzdCBvZiBhY2NlcHRlZCBsYW5ndWFnZXNcbiAgcmV0dXJuIHByaW9yaXRpZXMuZmlsdGVyKGlzUXVhbGl0eSkuc29ydChjb21wYXJlU3BlY3MpLm1hcChmdW5jdGlvbiBnZXRMYW5ndWFnZShwcmlvcml0eSkge1xuICAgIHJldHVybiBwcm92aWRlZFtwcmlvcml0aWVzLmluZGV4T2YocHJpb3JpdHkpXTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ29tcGFyZSB0d28gc3BlY3MuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNvbXBhcmVTcGVjcyhhLCBiKSB7XG4gIHJldHVybiAoYi5xIC0gYS5xKSB8fCAoYi5zIC0gYS5zKSB8fCAoYS5vIC0gYi5vKSB8fCAoYS5pIC0gYi5pKSB8fCAwO1xufVxuXG4vKipcbiAqIEdldCBmdWxsIGxhbmd1YWdlIHN0cmluZy5cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZ2V0RnVsbExhbmd1YWdlKHNwZWMpIHtcbiAgcmV0dXJuIHNwZWMuZnVsbDtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiBhIHNwZWMgaGFzIGFueSBxdWFsaXR5LlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBpc1F1YWxpdHkoc3BlYykge1xuICByZXR1cm4gc3BlYy5xID4gMDtcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicHJlZmVycmVkTGFuZ3VhZ2VzIiwic2ltcGxlTGFuZ3VhZ2VSZWdFeHAiLCJwYXJzZUFjY2VwdExhbmd1YWdlIiwiYWNjZXB0IiwiYWNjZXB0cyIsInNwbGl0IiwiaSIsImoiLCJsZW5ndGgiLCJsYW5ndWFnZSIsInBhcnNlTGFuZ3VhZ2UiLCJ0cmltIiwic3RyIiwibWF0Y2giLCJleGVjIiwicHJlZml4Iiwic3VmZml4IiwiZnVsbCIsInEiLCJwYXJhbXMiLCJwIiwicGFyc2VGbG9hdCIsImdldExhbmd1YWdlUHJpb3JpdHkiLCJhY2NlcHRlZCIsImluZGV4IiwicHJpb3JpdHkiLCJvIiwicyIsInNwZWMiLCJzcGVjaWZ5IiwidG9Mb3dlckNhc2UiLCJwcm92aWRlZCIsInVuZGVmaW5lZCIsImZpbHRlciIsImlzUXVhbGl0eSIsInNvcnQiLCJjb21wYXJlU3BlY3MiLCJtYXAiLCJnZXRGdWxsTGFuZ3VhZ2UiLCJwcmlvcml0aWVzIiwiZ2V0UHJpb3JpdHkiLCJ0eXBlIiwiZ2V0TGFuZ3VhZ2UiLCJpbmRleE9mIiwiYSIsImIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/negotiator/lib/language.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/negotiator/lib/mediaType.js":
/*!**************************************************!*\
  !*** ./node_modules/negotiator/lib/mediaType.js ***!
  \**************************************************/
/***/ ((module) => {

eval("/**\n * negotiator\n * Copyright(c) 2012 Isaac Z. Schlueter\n * Copyright(c) 2014 Federico Romero\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */ \n/**\n * Module exports.\n * @public\n */ module.exports = preferredMediaTypes;\nmodule.exports.preferredMediaTypes = preferredMediaTypes;\n/**\n * Module variables.\n * @private\n */ var simpleMediaTypeRegExp = /^\\s*([^\\s\\/;]+)\\/([^;\\s]+)\\s*(?:;(.*))?$/;\n/**\n * Parse the Accept header.\n * @private\n */ function parseAccept(accept) {\n    var accepts = splitMediaTypes(accept);\n    for(var i = 0, j = 0; i < accepts.length; i++){\n        var mediaType = parseMediaType(accepts[i].trim(), i);\n        if (mediaType) {\n            accepts[j++] = mediaType;\n        }\n    }\n    // trim accepts\n    accepts.length = j;\n    return accepts;\n}\n/**\n * Parse a media type from the Accept header.\n * @private\n */ function parseMediaType(str, i) {\n    var match = simpleMediaTypeRegExp.exec(str);\n    if (!match) return null;\n    var params = Object.create(null);\n    var q = 1;\n    var subtype = match[2];\n    var type = match[1];\n    if (match[3]) {\n        var kvps = splitParameters(match[3]).map(splitKeyValuePair);\n        for(var j = 0; j < kvps.length; j++){\n            var pair = kvps[j];\n            var key = pair[0].toLowerCase();\n            var val = pair[1];\n            // get the value, unwrapping quotes\n            var value = val && val[0] === '\"' && val[val.length - 1] === '\"' ? val.substr(1, val.length - 2) : val;\n            if (key === \"q\") {\n                q = parseFloat(value);\n                break;\n            }\n            // store parameter\n            params[key] = value;\n        }\n    }\n    return {\n        type: type,\n        subtype: subtype,\n        params: params,\n        q: q,\n        i: i\n    };\n}\n/**\n * Get the priority of a media type.\n * @private\n */ function getMediaTypePriority(type, accepted, index) {\n    var priority = {\n        o: -1,\n        q: 0,\n        s: 0\n    };\n    for(var i = 0; i < accepted.length; i++){\n        var spec = specify(type, accepted[i], index);\n        if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {\n            priority = spec;\n        }\n    }\n    return priority;\n}\n/**\n * Get the specificity of the media type.\n * @private\n */ function specify(type, spec, index) {\n    var p = parseMediaType(type);\n    var s = 0;\n    if (!p) {\n        return null;\n    }\n    if (spec.type.toLowerCase() == p.type.toLowerCase()) {\n        s |= 4;\n    } else if (spec.type != \"*\") {\n        return null;\n    }\n    if (spec.subtype.toLowerCase() == p.subtype.toLowerCase()) {\n        s |= 2;\n    } else if (spec.subtype != \"*\") {\n        return null;\n    }\n    var keys = Object.keys(spec.params);\n    if (keys.length > 0) {\n        if (keys.every(function(k) {\n            return spec.params[k] == \"*\" || (spec.params[k] || \"\").toLowerCase() == (p.params[k] || \"\").toLowerCase();\n        })) {\n            s |= 1;\n        } else {\n            return null;\n        }\n    }\n    return {\n        i: index,\n        o: spec.i,\n        q: spec.q,\n        s: s\n    };\n}\n/**\n * Get the preferred media types from an Accept header.\n * @public\n */ function preferredMediaTypes(accept, provided) {\n    // RFC 2616 sec 14.2: no header = */*\n    var accepts = parseAccept(accept === undefined ? \"*/*\" : accept || \"\");\n    if (!provided) {\n        // sorted list of all types\n        return accepts.filter(isQuality).sort(compareSpecs).map(getFullType);\n    }\n    var priorities = provided.map(function getPriority(type, index) {\n        return getMediaTypePriority(type, accepts, index);\n    });\n    // sorted list of accepted types\n    return priorities.filter(isQuality).sort(compareSpecs).map(function getType(priority) {\n        return provided[priorities.indexOf(priority)];\n    });\n}\n/**\n * Compare two specs.\n * @private\n */ function compareSpecs(a, b) {\n    return b.q - a.q || b.s - a.s || a.o - b.o || a.i - b.i || 0;\n}\n/**\n * Get full type string.\n * @private\n */ function getFullType(spec) {\n    return spec.type + \"/\" + spec.subtype;\n}\n/**\n * Check if a spec has any quality.\n * @private\n */ function isQuality(spec) {\n    return spec.q > 0;\n}\n/**\n * Count the number of quotes in a string.\n * @private\n */ function quoteCount(string) {\n    var count = 0;\n    var index = 0;\n    while((index = string.indexOf('\"', index)) !== -1){\n        count++;\n        index++;\n    }\n    return count;\n}\n/**\n * Split a key value pair.\n * @private\n */ function splitKeyValuePair(str) {\n    var index = str.indexOf(\"=\");\n    var key;\n    var val;\n    if (index === -1) {\n        key = str;\n    } else {\n        key = str.substr(0, index);\n        val = str.substr(index + 1);\n    }\n    return [\n        key,\n        val\n    ];\n}\n/**\n * Split an Accept header into media types.\n * @private\n */ function splitMediaTypes(accept) {\n    var accepts = accept.split(\",\");\n    for(var i = 1, j = 0; i < accepts.length; i++){\n        if (quoteCount(accepts[j]) % 2 == 0) {\n            accepts[++j] = accepts[i];\n        } else {\n            accepts[j] += \",\" + accepts[i];\n        }\n    }\n    // trim accepts\n    accepts.length = j + 1;\n    return accepts;\n}\n/**\n * Split a string of parameters.\n * @private\n */ function splitParameters(str) {\n    var parameters = str.split(\";\");\n    for(var i = 1, j = 0; i < parameters.length; i++){\n        if (quoteCount(parameters[j]) % 2 == 0) {\n            parameters[++j] = parameters[i];\n        } else {\n            parameters[j] += \";\" + parameters[i];\n        }\n    }\n    // trim parameters\n    parameters.length = j + 1;\n    for(var i = 0; i < parameters.length; i++){\n        parameters[i] = parameters[i].trim();\n    }\n    return parameters;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/negotiator/lib/mediaType.js\n");

/***/ })

};
;